<html>
  <head>
    <style type="text/css">
      body {
        margin: 0px;
      }
      #graph-view {
        max-width: 100%;
        height: 70%;
        margin: 0px;
        padding: 0px;
        border-style: solid;
      }
    </style>
    <script
      type="text/javascript"
      src="https://cdnjs.cloudflare.com/ajax/libs/sigma.js/1.2.1/sigma.min.js"
    ></script>
    <script
      type="text/javascript"
      src="https://cdnjs.cloudflare.com/ajax/libs/sigma.js/1.2.1/plugins/sigma.parsers.json.min.js"
    ></script>
  </head>
  <body>
    <div id="graph-view"></div>
    <script type="text/javascript">
      
      function defaultNodeRenderer(style) {
        const graphDraw = this.graphDraw;
        sigma.canvas.nodes.def = function(node, context, settings) {
          // console.log(node);
          if (Object.keys(style).length > 0) {
            for (let layer in style) {
              const layer_style = style[layer];
              const attr_name = layer;
              if (attr_name in node) {
                graphDraw.drawNode(
                  node,
                  context,
                  settings,
                  layer_style[node[attr_name]]
                );
              }
            }
          } else {
            graphDraw.drawNode(node, context, settings, {
              size: 1,
              color: "blue",
              shape: "circle"
            });
          }
        };
      }

      function defaultEdgeRenderer(style) {
        // console.log(style);
        const graphDraw = this.graphDraw;
        sigma.canvas.edges.def = function(edge, source, target, context, settings) {
          if (Object.keys(style).length > 0) {
            for (let layer in style) {
              const layer_style = style[layer];
              const attr_name = layer;
              if (attr_name in edge) {
                graphDraw.drawEdge(
                  edge,
                  source,
                  target,
                  context,
                  settings,
                  layer_style[edge[attr_name]]
                );
              }
            }
          } else {
            const s = edge.weight || 1;
            let c = "gray";
            if (edge.weight) {
              c = `rgba(255,0,0,${edge.weight}`;
            }
            graphDraw.drawEdge(edge, source, target, context, settings, {
              size: s,
              color: c
            });
          }
        };
      }


      function apply_layout(g, layout) {
        for (let node of g.nodes) {
          node.x = layout[node.id][0];
          node.y = layout[node.id][1];
        }
      }

      g = {{ g }};
      layout = {{ layout }};
      console.log(layout);
      apply_layout(g, layout);
      
      // Instantiate sigma:
      s = new sigma({
        graph: g,
        container: "graph-view"
      });
      console.log(g);
    </script>
  </body>
</html>
